locals {
  apply_filter_string    = "{ $$.awsRegion != \"${var.region}\" }"
  cloudtrail_bucket_name = "${var.prefix}.${var.cluster}.streamalert.cloudtrail"
}

// KMS key for encrypting CloudTrail logs
resource "aws_kms_key" "cloudtrail_encryption" {
  description         = "Encrypt Cloudtrail logs for ${local.cloudtrail_bucket_name}"
  policy              = "${data.aws_iam_policy_document.cloudtrail_encryption.json}"
  enable_key_rotation = true
}

// This policy is auto-generated by AWS if you manually encrypt a CloudTrail from the console.
data "aws_iam_policy_document" "cloudtrail_encryption" {
  statement {
    sid = "Enable IAM User Permissions"

    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::${var.primary_account_id}:root"]
    }

    actions   = ["kms:*"]
    resources = ["*"]
  }

  statement {
    sid = "Allow CloudTrail to encrypt logs"

    principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
    }

    actions   = ["kms:GenerateDataKey*"]
    resources = ["*"]

    condition {
      test     = "StringLike"
      variable = "kms:EncryptionContext:aws:cloudtrail:arn"
      values   = ["arn:aws:cloudtrail:*:${var.primary_account_id}:trail/*"]
    }
  }

  statement {
    sid = "Allow CloudTrail to describe key"

    principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
    }

    actions   = ["kms:DescribeKey"]
    resources = ["*"]
  }

  statement {
    sid = "Allow principals in the account to decrypt log files"

    principals {
      type        = "AWS"
      identifiers = ["*"]
    }

    actions = [
      "kms:Decrypt",
      "kms:ReEncryptFrom",
    ]

    resources = ["*"]

    condition {
      test     = "StringEquals"
      variable = "kms:CallerAccount"
      values   = ["${var.primary_account_id}"]
    }

    condition {
      test     = "StringLike"
      variable = "kms:EncryptionContext:aws:cloudtrail:arn"
      values   = ["arn:aws:cloudtrail:*:${var.primary_account_id}:trail/*"]
    }
  }
}

resource "aws_kms_alias" "cloudtrail_encryption" {
  name          = "alias/${var.prefix}-${var.cluster}-streamalert-cloudtrail"
  target_key_id = "${aws_kms_key.cloudtrail_encryption.key_id}"
}

// StreamAlert CloudTrail, also sending to CloudWatch Logs group
resource "aws_cloudtrail" "streamalert" {
  count                         = "${var.send_to_cloudwatch && !var.existing_trail ? 1 : 0}"
  name                          = "${local.cloudtrail_bucket_name}"
  s3_bucket_name                = "${aws_s3_bucket.cloudtrail_bucket.id}"
  cloud_watch_logs_role_arn     = "${aws_iam_role.cloudtrail_to_cloudwatch_role.arn}"
  cloud_watch_logs_group_arn    = "${aws_cloudwatch_log_group.cloudtrail_logging.arn}"
  enable_log_file_validation    = true
  enable_logging                = "${var.enable_logging}"
  include_global_service_events = true
  is_multi_region_trail         = "${var.is_global_trail}"
  kms_key_id                    = "${aws_kms_key.cloudtrail_encryption.arn}"

  event_selector {
    read_write_type           = "All"
    include_management_events = true

    data_resource {
      type = "AWS::S3::Object"

      values = [
        "arn:aws:s3",
      ]
    }
  }
}

// StreamAlert CloudTrail, not sending to CloudWatch
resource "aws_cloudtrail" "streamalert_no_cloudwatch" {
  count                         = "${!var.send_to_cloudwatch && !var.existing_trail ? 1 : 0}"
  name                          = "${local.cloudtrail_bucket_name}"
  s3_bucket_name                = "${aws_s3_bucket.cloudtrail_bucket.id}"
  enable_log_file_validation    = true
  enable_logging                = "${var.enable_logging}"
  include_global_service_events = true
  is_multi_region_trail         = "${var.is_global_trail}"
  kms_key_id                    = "${aws_kms_key.cloudtrail_encryption.arn}"

  event_selector {
    read_write_type           = "All"
    include_management_events = true

    data_resource {
      type = "AWS::S3::Object"

      values = [
        "arn:aws:s3",
      ]
    }
  }
}

// CloudWatch Log group to send all CloudTrail logs to
resource "aws_cloudwatch_log_group" "cloudtrail_logging" {
  count             = "${var.send_to_cloudwatch ? 1 : 0}"
  name              = "CloudTrail/DefaultLogGroup"
  retention_in_days = 1
}

// IAM Role: Allow CloudTrail logs to send logs to CloudWatch Logs
resource "aws_iam_role" "cloudtrail_to_cloudwatch_role" {
  count = "${var.send_to_cloudwatch ? 1 : 0}"
  name  = "cloudtrail_to_cloudwatch_role"

  assume_role_policy = "${data.aws_iam_policy_document.cloudtrail_to_cloudwatch_assume_role_policy.json}"
}

// IAM Policy Document: Allow CloudTrail to AssumeRole
data "aws_iam_policy_document" "cloudtrail_to_cloudwatch_assume_role_policy" {
  count = "${var.send_to_cloudwatch ? 1 : 0}"

  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
    }
  }
}

// IAM Role Policy: Allow CloudTrail logs to create log streams and put logs to CloudWatch Logs
resource "aws_iam_role_policy" "cloudtrail_to_cloudwatch_create_logs" {
  count  = "${var.send_to_cloudwatch ? 1 : 0}"
  name   = "CloudTrailToCloudWatchCreateLogs"
  role   = "${aws_iam_role.cloudtrail_to_cloudwatch_role.id}"
  policy = "${data.aws_iam_policy_document.cloudtrail_to_cloudwatch_create_logs.json}"
}

// IAM Policy Document: Allow CloudTrail logs to create log streams and put logs to CloudWatch Logs
data "aws_iam_policy_document" "cloudtrail_to_cloudwatch_create_logs" {
  count = "${var.send_to_cloudwatch ? 1 : 0}"

  statement {
    sid       = "AWSCloudTrailCreateLogStream"
    effect    = "Allow"
    actions   = ["logs:CreateLogStream"]
    resources = ["${aws_cloudwatch_log_group.cloudtrail_logging.arn}"]
  }

  statement {
    sid       = "AWSCloudTrailPutLogEvents"
    effect    = "Allow"
    actions   = ["logs:PutLogEvents"]
    resources = ["${aws_cloudwatch_log_group.cloudtrail_logging.arn}"]
  }

  statement {
    sid    = "AWSCloudTrailEncryptLogEvents"
    effect = "Allow"

    actions = [
      "kms:Decrypt",
      "kms:Encrypt",
      "kms:GenerateDataKey*",
    ]

    resources = ["${aws_kms_key.cloudtrail_encryption.arn}"]
  }
}

// CloudWatch Log Subscription Filter
//   If we are collecting CloudTrail logs in the 'home region' another way, this allows
//   for suppression of logs that originated in this region.
resource "aws_cloudwatch_log_subscription_filter" "cloudtrail_via_cloudwatch" {
  count           = "${var.send_to_cloudwatch ? 1 : 0}"
  name            = "cloudtrail_delivery"
  log_group_name  = "${aws_cloudwatch_log_group.cloudtrail_logging.name}"
  filter_pattern  = "${var.exclude_home_region_events ? local.apply_filter_string : ""}"
  destination_arn = "${var.cloudwatch_destination_arn}"
  distribution    = "Random"
}

// S3 bucket for CloudTrail output
resource "aws_s3_bucket" "cloudtrail_bucket" {
  count         = "${var.existing_trail ? 0 : 1}"
  bucket        = "${local.cloudtrail_bucket_name}"
  policy        = "${data.aws_iam_policy_document.cloudtrail_bucket.json}"
  force_destroy = false

  versioning {
    enabled = true
  }

  logging {
    target_bucket = "${var.s3_logging_bucket}"
    target_prefix = "${local.cloudtrail_bucket_name}/"
  }

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm     = "aws:kms"
        kms_master_key_id = "${aws_kms_key.cloudtrail_encryption.key_id}"
      }
    }
  }

  tags {
    Name    = "${local.cloudtrail_bucket_name}"
    Cluster = "${var.cluster}"
  }
}

data "aws_iam_policy_document" "cloudtrail_bucket" {
  count = "${var.existing_trail ? 0 : 1}"

  statement {
    sid = "AWSCloudTrailAclCheck"

    actions = [
      "s3:GetBucketAcl",
    ]

    resources = [
      "arn:aws:s3:::${local.cloudtrail_bucket_name}",
    ]

    principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
    }
  }

  statement {
    sid = "AWSCloudTrailWrite"

    actions = [
      "s3:PutObject",
    ]

    resources = [
      "${formatlist("arn:aws:s3:::${local.cloudtrail_bucket_name}/AWSLogs/%s/*", var.account_ids)}",
    ]

    principals {
      type        = "Service"
      identifiers = ["cloudtrail.amazonaws.com"]
    }

    condition {
      test     = "StringEquals"
      variable = "s3:x-amz-acl"

      values = [
        "bucket-owner-full-control",
      ]
    }
  }

  # Force SSL access only
  statement {
    sid = "ForceSSLOnlyAccess"

    effect = "Deny"

    principals {
      type        = "AWS"
      identifiers = ["*"]
    }

    actions = ["s3:*"]

    resources = [
      "arn:aws:s3:::${local.cloudtrail_bucket_name}",
      "arn:aws:s3:::${local.cloudtrail_bucket_name}/*",
    ]

    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["false"]
    }
  }
}
