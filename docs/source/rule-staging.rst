Rule Staging
============

Rule staging allows dynamic toggling of rules from a staging to production state, and vice versa.
Staged rules will only send alerts for historical retention, and the alerts will not be sent to any
user-defined outputs, such as Slack, PagerDuty, etc.

Enabling Rule Staging
---------------------

By default, the rule staging feature is not enabled. It can be enabled with the following command:

.. code-block:: bash

  python manage.py rule-staging enable --true

The change will be reflected in the ``conf/globals.json`` file:

.. code-block:: json
  :caption: ``conf/global.json``

  {
    "infrastructure": {
      "rule_staging": {
        "cache_refresh_minutes": 10,
        "enabled": true,
        "table": {
          "read_capacity": 20,
          "write_capacity": 5
        }
      }
    }
  }

Configuration Options
---------------------

A few configuration options are available to customize the feature to your needs.

===========================  ========  =======  ===========
Key                          Required  Default  Description
---------------------------  --------  -------  -----------
``cache_refresh_minutes``    ``No``    ``10``   Maximum amount of time (in minutes) the Rule Processor
                                                should wait to force refresh the rule staging information.
``table.read_capacity``      ``Yes``   ``20``   DynamoDB read capacity to allocate to the table that stores staging
                                                information. The default setting should be sufficient in most use cases.
``table.write_capacity``     ``Yes``   ``5``    DynamoDB write capacity to allocate to the table that stores staging
                                                information. The default setting should be sufficient in most use cases.
===========================  ========  =======  ===========

The initial implementation of the Rule Staging feature has a hard-coded 'staging period', or the time
a rule should remain in staging before being auto-promoted to send to user-defined outputs. This is
only relevant if the `Rule Promotion <rule-promotion.html>`_ feature is also enabled. The current
default is 48 hours.

CLI Commands
------------

Rule Status
+++++++++++

The status of rules, meaning whether or not they are staged, can be determined with the following command:

.. code-block:: bash

  python manage.py rule-staging status

**Sample Output**::

  Rule                                     Staged?
    1: rule_001                            False
    2: rule_002                            True
    3: rule_003                            False
    4: rule_004                            False

Toggling Staged Status
++++++++++++++++++++++

Staging a rule, or list of rules, is possible with the following command:

.. code-block:: bash

  python manage.py rule-staging stage <rule_001> <rule_002>

Unstaging rules, enabling them to send to all user-defined outputs, is equally as easy and accomplished
with the following command:

.. code-block:: bash

  python manage.py rule-staging unstage <rule_001> <rule_002>

Triaging Staged Rules
---------------------

Once a rule is in staging, alerts generated by that rule can be queried in Athena:

.. code-block:: sql

  SELECT 'rule_001' as rule_name, count(*) AS alert_count FROM alerts WHERE dt >= '2018-07-25-16' AND rule_name = 'rule_001' AND staged = True

.. csv-table:: Athena Results
  :header: "rule_name", "alert_count"
  :widths: 60, 10

  "rule_001", 96

To help automate triaging of staged rules, StreamAlert includes an optional Rule Promotion Lambda
function. This function can both send alert digests via email and auto-promote rules out of staging.
See the `Rule Promotion <rule-promotion.html>`_ page for more detail.
